type: install
name: Elastic Beats Multiple
id: elasticbeats-multiple

logo: https://raw.githubusercontent.com/SiryjVyiko/beats-addon/main/elastic-beats.png
description:
  short: 'Elastic Beats: Lightweight data shippers'
  text: |
    Beats is a free and open platform for single-purpose data shippers. They send data from nodes of your environments to Logstash or OpenSearch (Elasticsearch).
homepage: https://www.elastic.co/beats/

baseUrl: https://raw.githubusercontent.com/SiryjVyiko/beats-addon/main/

settings:
  fields:
    - type: checkboxlist
      caption: Installed agents
      name: options
      columns: 2
      values:
        - name: filebeat
          caption: Filebeat
          value: true

        - name: journalbeat
          caption: Journalbeat
          value: false
          
        - name: packetbeat
          caption: Packetbeat
          value: false

        - name: metricbeat
          caption: Metribeat
          value: false

        - name: heartbeat
          caption: Heartbeat
          value: false
          
    - type: list
      name: beatsossversion
      caption: Beats OSS Version
      values:
        7.12.1: 7.12.1
        latest: latest
      default: 7.12.1
      hideLabel: false
      hidden: false
        
    - caption: Optional Parameters
      type: displayfield
      name: displayfield
      hidden: false

    - type: string
      name: opensearchHost
      caption: OpenSearch Host (opt.)
      placeholder: 0.0.0.0:9200
      required: false
      
    - type: compositefield
      caption: Credentials (opt.)
      defaultMargins: 0 10 0 0
      items:
        - type: displayfield
          cls: x-form-item-label
          value: User
          width: 30
        
        - type: string
          name: opensearchUser
          placeholder: OpenSearch username
          width: 180
            
        - type: displayfield
          cls: x-form-item-label
          value: Password
          width: 60

        - type: string
          name: opensearchPassword
          placeholder: password
          inputType: password
          width: 153
          
    - type: string
      name: apiKey
      caption: API Key (opt.)
      placeholder: id:api_key
      required: false
          
    - type: string
      name: osearchdashboardHost
      caption: OpenSearch Dashboards Host (opt.)
      placeholder: 0.0.0.0:5601
      required: false
      
    - type: string
      name: logstashHost
      caption: Logstash Host (opt.)
      placeholder: 0.0.0.0:5044
      required: false
          
    - type: spacer

    - type: list
      name: envName
      caption: Environment
      required: true
      values: []

    - type: radiolist
      caption: Nodes
      name: mode
      columns: 3
      value: allNodeGroups
      values:
        - caption: All Nodes
          value: allNodeGroups

        - caption: Specific Nodes
          value: specificNodeGroups
      showIf:
        specificNodeGroups:
          - type: list
            name: nodeGroups
            required: true
            multiSelect: true
            dependsOn:
              envName: {}

onBeforeInit: |
  var resp = jelastic.env.control.GetEnvs();
  if (resp.result !== 0) return resp;
  var envs = [];
  var nodes = {};

  for (var i = 0, envInfo, env; envInfo = resp.infos[i]; i++) {
    env = envInfo.env;

    if (env.status == 1) {
      for (var j = 0, node; node = envInfo.nodes[j]; j++) {
        nodes[env.envName] = nodes[env.envName] || [];
        nodes[env.envName].groups = nodes[env.envName].groups || {};

        if (!nodes[env.envName].groups[node.nodeGroup])
          nodes[env.envName].push({
            value: node.nodeGroup,
            caption: (node.displayName || node.name) + ' (' + node.nodeGroup + ')'
          });

        nodes[env.envName].groups[node.nodeGroup] = true;
      }

      if (nodes[env.envName] && nodes[env.envName].length > 0) {
        envs.push({
          value: env.envName,
          caption: (env.displayName || env.envName)
        });
      }
    }
  }

  if (envs.length > 0) {
    jps.settings.fields[9].values = envs;
    jps.settings.fields[9].value = envs[0].value;
    jps.settings.fields[10].showIf.specificNodeGroups[0].dependsOn.envName = nodes;
  }

  return { result: 0, settings: jps.settings };

onInstall:
  - if ('${settings.mode}' == 'specificNodeGroups'):
      set: { nodeGroups: '${settings.nodeGroups}' }
  - else:
      - env.control.GetEnvInfo:
          envName: ${settings.envName}
      - set: { nodeGroups: '${response.nodeGroups.join(name,)}' }

  - install [${this.nodeGroups}]:
      envName: ${settings.envName}
      settings:
        options: ${settings.options}
        filebeat: ${settings.filebeat}
        journalbeat: ${settings.journalbeat}
        packetbeat: ${settings.packetbeat}
        metricbeat: ${settings.metricbeat}
        heartbeat: ${settings.heartbeat}
        opensearchHost: ${settings.opensearchHost}
        osearchdashboardHost: ${settings.osearchdashboardHost}
        logstashHost: ${settings.logstashHost}
        beatsossversion: ${settings.beatsossversion}
        opensearchUser: ${settings.opensearchUser}
        opensearchPassword: ${settings.opensearchPassword}
      jps: manifest.yml
